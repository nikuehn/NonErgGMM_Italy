theme(
axis.title = element_text(size = 18),
axis.text = element_text(size = 12),
plot.title = element_text(size = 30),
strip.text.x = element_text(size = 12)
)
n_rec
form_lmer <- Y ~ M1 + M2 + lnR + MlnR + R + Fss + Frv + lnVS + (1 | eq) + (1 | stat)
fti_lmer <- lme4::lmer(fom_lmer, data = data_reg)
fti_lmer <- lme4::lmer(form_lmer, data = data_reg)
fti_lmer
fit_inla_spatial7$mode$theta
dim(fit_inla_spatial7$mode$theta)
length(fit_inla_spatial7$mode$theta)
colnames(fit_inla_spatial7$mode$theta)
rownames(fit_inla_spatial7$mode$theta)
tmp <- fit_inla_spatial7$mode$theta
names(fit_inla_spatial7$mode$theta)
fit_inla_spatial7$mode$theta["Log precision for the Gaussian observations"]
names(fit_inla_spatial8$mode$theta)
wid <- 8
asp <- 0.8
theme_set(theme_bw() + theme(panel.grid.minor = element_blank()))
###### map of data
xlab <- expression(atop(paste("Longitude (", degree,")")))
ylab <- expression(atop(paste("Latitude (", degree,")")))
p <- ggplot() +
geom_sf(data = shape_utm_no_lamp, size = 1.6, color = "black", fill = NA )+
geom_point(data = utm_st, aes(x=longitude_st, y=latitude_st), fill= 'deeppink3',
size = 2, shape = 24, stroke = 0.7)+
geom_point(data = utm_ev, aes(x=longitude_ev, y=latitude_ev), fill= 'azure2',
size = 2, shape = 21, stroke = 1.0)+
labs(x=xlab, y=ylab) +
theme(
axis.title = element_text(size = 20),
axis.text = element_text(size = 14),
plot.title = element_text(size = 30)
)
p
ggsave(file.path('RESULTS','PLOTS','plot_map_data.pdf'), p,
width = wid, height = asp * wid)
data <- read.csv(file.path('DATA', 'italian_data_pga_id_utm_stat.csv'))
data <- read.csv(file.path('/Users/nico/GROUNDMOTION/PROJECTS/NONERGODIC/ITALY/Git/NonErgGMM_Italy','DATA', 'italian_data_pga_id_utm_stat.csv'))
rm(list = ls())
setwd('/Users/nico/GROUNDMOTION/PROJECTS/NONERGODIC/ITALY/Git/NonErgGMM_Italy')
# load required packages
library(lme4)
library(sf)
library(raster)
library(rgdal)
library(GWmodel)
library(ggplot2)
library(tictoc)
setwd('/Users/nico/GROUNDMOTION/PROJECTS/NONERGODIC/ITALY/Git/NonErgGMM_Italy')
source(file.path("R_Caramenti", "functions.R"))
source(file.path("R_Caramenti", "predict_new.R"))
# load required packages
library(lme4)
library(sf)
library(raster)
library(rgdal)
library(GWmodel)
library(ggplot2)
library(tictoc)
setwd('/Users/nico/GROUNDMOTION/PROJECTS/NONERGODIC/ITALY/Git/NonErgGMM_Italy')
source(file.path("R_Caramenti", "functions.R"))
source(file.path("R_Caramenti", "predict_new.R"))
# read in data file with event and station ids
# corrected for Vs30 differences between stations of same location
data <- read.csv(file.path('DATA', 'italian_data_pga_id_utm_stat.csv'))
print(dim(data))
data <- data[1:200,]
# Set linear predictors
mh = 5.5
mref = 5.324
h = 6.924
attach(data)
b1 = (mag-mh)*(mag<=mh)
b2 = (mag-mh)*(mag>mh)
c1 = (mag-mref)*log10(sqrt(JB_complete^2+h^2))
c2 = log10(sqrt(JB_complete^2+h^2))
c3 = sqrt(JB_complete^2+h^2)
f1 = as.numeric(fm_type_code == "SS")
f2 = as.numeric(fm_type_code == "TF")
k = log10(vs30/800)*(vs30<=1500)+log10(1500/800)*(vs30>1500)
y = log10(rotD50_pga)
detach(data)
eq <- data$EQID
stat <- data$STATID
n_rec <- length(b1)
n_eq <- max(eq)
n_stat <- max(stat)
# spatial coordinates
dataset = readRDS(file.path("DATA","italian_data_pga.RData"))
shape_utm = st_read(file.path("DATA",'confini_ut33.shp'))
shape_utm_no_lamp = shape_utm
shape_utm_no_lamp$geometry[[1]][[12]] = NULL
shape_utm_no_sardinia = shape_utm
shape_utm_no_sardinia$geometry[[1]][[3]] = NULL
for (i in 4:10){
shape_utm_no_sardinia$geometry[[1]][[4]] = NULL
}
for (i in 12:57){
shape_utm_no_sardinia$geometry[[1]][[5]] = NULL
}
#Project coordinates of the events to work with UTM33:
latitude_ev = dataset$ev_latitude
longitude_ev = dataset$ev_longitude
long_lat_ev = cbind(longitude_ev, latitude_ev)
utm_ev = project(long_lat_ev, "+proj=utm +zone=33 ellps=WGS84")
utm_ev = as.data.frame(utm_ev)
long_lat_ev = as.data.frame(long_lat_ev)
#Project coordinates of the stations to work with UTM33:
latitude_st = dataset$st_latitude
longitude_st = dataset$st_longitude
long_lat_st = cbind(longitude_st, latitude_st)
utm_st = project(long_lat_st, "+proj=utm +zone=33 ellps=WGS84")
utm_st = as.data.frame(utm_st)
long_lat_st = as.data.frame(long_lat_st)
#Build spatial points data frame for UTM33 coordinates:
utm_ev_sp = SpatialPointsDataFrame(utm_ev, dataset[,1:6])
utm_st_sp = SpatialPointsDataFrame(utm_st, dataset[,1:6])
#Transform shapefile into spatial dataframe:
shape_utm_spatial = as_Spatial(shape_utm_no_sardinia)
grid_utm = makegrid(shape_utm_spatial, cellsize = 10000) # cellsize in map units!
grid_utm = SpatialPoints(grid_utm, proj4string = CRS(proj4string(shape_utm_spatial)))
grid_inside_utm = grid_utm[shape_utm_spatial,]
coords_utm = grid_inside_utm@coords
#Transform shapefile into spatial dataframe:
tic()
shape_utm_spatial = as_Spatial(shape_utm_no_sardinia)
grid_utm = makegrid(shape_utm_spatial, cellsize = 10000) # cellsize in map units!
grid_utm = SpatialPoints(grid_utm, proj4string = CRS(proj4string(shape_utm_spatial)))
toc()
Xc = cbind(b1,b2,f1,f2,c1)
Xe = cbind(c2,c3)
Xs = k
# best bandwidth is set
bwe = 25000
bws = 75000
coords_df_utm = as.data.frame(coords_utm)
dim(Xs)
Xs
length(Xs)
dim(Xc)
tic()
sec = SEC_only_calibration(Xc, Xe, Xs, y, "c", bwe, bws, coordinates(utm_ev_sp), coordinates(utm_st_sp))
toc()
bw
bwe
bws
coordinates(utm_ev_sp)
library(sf)
library(raster)
library(ggplot2)
library(rgdal)
library(GWmodel)
library(cowplot)
library(geosphere)
library(psych)
library(pracma)
library(reshape2)
#library(plot3D)
library(INLA)
library(inlabru)
set1 <- RColorBrewer::brewer.pal(7, "Set1")
local.plot.field = function(field, mesh, xlim=c(0,10), ylim=c(0,10), ...){
stopifnot(length(field) == mesh$n)
proj = inla.mesh.projector(mesh, xlim = xlim,
ylim = ylim, dims=c(300, 300))
field.proj = inla.mesh.project(proj, field)
n.col = 20
image.plot(list(x = proj$x, y=proj$y, z = field.proj),
xlim = xlim, ylim = ylim, col = plasma(n.col), nlevel=n.col+1)
}
dir_esupp <- '/Users/nico/GROUNDMOTION/PROJECTS/NONERGODIC/ITALY/Caramenti_esupp/'
setwd('/Users/nico/GROUNDMOTION/PROJECTS/NONERGODIC/ITALY/')
dataset = readRDS(file.path(dir_esupp,"italian_data_pga.RData"))
write.csv(dataset, file = file.path(dir_esupp,"italian_data_pga.csv"),row.names = FALSE)
source(file.path(dir_esupp,"functions.R"))
source(file.path(dir_esupp,"predict_new.R"))
shape_utm = st_read(file.path(dir_esupp,'confini_ut33.shp'))
shape_utm_no_lamp = shape_utm
shape_utm_no_lamp$geometry[[1]][[12]] = NULL
shape_utm_no_sardinia = shape_utm
shape_utm_no_sardinia$geometry[[1]][[3]] = NULL
for (i in 4:10){
shape_utm_no_sardinia$geometry[[1]][[4]] = NULL
}
for (i in 12:57){
shape_utm_no_sardinia$geometry[[1]][[5]] = NULL
}
#Project coordinates of the events to work with UTM33:
latitude_ev = dataset$ev_latitude
longitude_ev = dataset$ev_longitude
long_lat_ev = cbind(longitude_ev, latitude_ev)
utm_ev = project(long_lat_ev, "+proj=utm +zone=33 ellps=WGS84")
utm_ev = as.data.frame(utm_ev)
long_lat_ev = as.data.frame(long_lat_ev)
#Arrange coordinates of the stations to work with UTM33:
latitude_st = dataset$st_latitude
longitude_st = dataset$st_longitude
long_lat_st = cbind(longitude_st, latitude_st)
utm_st = project(long_lat_st, "+proj=utm +zone=33 ellps=WGS84")
utm_st = as.data.frame(utm_st)
long_lat_st = as.data.frame(long_lat_st)
#Build spatial points data frame for UTM33 coordinates:
utm_ev_sp = SpatialPointsDataFrame(utm_ev, dataset[,1:6])
utm_st_sp = SpatialPointsDataFrame(utm_st, dataset[,1:6])
#Transform shapefile into spatial dataframe:
shape_utm_spatial = as_Spatial(shape_utm_no_sardinia)
grid_utm = makegrid(shape_utm_spatial, cellsize = 10000) # cellsize in map units!
grid_utm = SpatialPoints(grid_utm, proj4string = CRS(proj4string(shape_utm_spatial)))
grid_inside_utm = grid_utm[shape_utm_spatial,]
coords_utm = grid_inside_utm@coords
#Apply functional on dataset, set parameters and create covariate matrices:
mh = 5.5
mref = 5.324
h = 6.924
attach(dataset)
b1 = (mag-mh)*(mag<=mh)
b2 = (mag-mh)*(mag>mh)
c1 = (mag-mref)*log10(sqrt(JB_complete^2+h^2))
c2 = log10(sqrt(JB_complete^2+h^2))
c3 = sqrt(JB_complete^2+h^2)
f1 = as.numeric(fm_type_code == "SS")
f2 = as.numeric(fm_type_code == "TF")
k = log10(vs30/800)*(vs30<=1500)+log10(1500/800)*(vs30>1500)
y = log10(rotD50_pga)
detach(dataset)
Xc = cbind(b1,b2,f1,f2,c1)
Xe = cbind(c2,c3)
Xs = k
# best bandwidth is set
bwe = 25000
bws = 75000
coords_df_utm = as.data.frame(coords_utm)
sec = SEC_only_calibration(Xc, Xe, Xs, y, "c", bwe, bws, coordinates(utm_ev_sp), coordinates(utm_st_sp))
coordinates(utm_ev_sp)
# load required packages
library(lme4)
library(sf)
library(raster)
library(rgdal)
library(GWmodel)
library(ggplot2)
library(tictoc)
setwd('/Users/nico/GROUNDMOTION/PROJECTS/NONERGODIC/ITALY/Git/NonErgGMM_Italy')
source(file.path("R_Caramenti", "functions.R"))
source(file.path("R_Caramenti", "predict_new.R"))
# read in data file with event and station ids
# corrected for Vs30 differences between stations of same location
data <- read.csv(file.path('DATA', 'italian_data_pga_id_utm_stat.csv'))
print(dim(data))
data <- data[1:200,]
# Set linear predictors
mh = 5.5
mref = 5.324
h = 6.924
attach(data)
b1 = (mag-mh)*(mag<=mh)
b2 = (mag-mh)*(mag>mh)
c1 = (mag-mref)*log10(sqrt(JB_complete^2+h^2))
c2 = log10(sqrt(JB_complete^2+h^2))
c3 = sqrt(JB_complete^2+h^2)
f1 = as.numeric(fm_type_code == "SS")
f2 = as.numeric(fm_type_code == "TF")
k = log10(vs30/800)*(vs30<=1500)+log10(1500/800)*(vs30>1500)
y = log10(rotD50_pga)
detach(data)
eq <- data$EQID
stat <- data$STATID
n_rec <- length(b1)
n_eq <- max(eq)
n_stat <- max(stat)
# spatial coordinates
dataset = readRDS(file.path("DATA","italian_data_pga.RData"))
shape_utm = st_read(file.path("DATA",'confini_ut33.shp'))
shape_utm_no_lamp = shape_utm
shape_utm_no_lamp$geometry[[1]][[12]] = NULL
shape_utm_no_sardinia = shape_utm
shape_utm_no_sardinia$geometry[[1]][[3]] = NULL
for (i in 4:10){
shape_utm_no_sardinia$geometry[[1]][[4]] = NULL
}
for (i in 12:57){
shape_utm_no_sardinia$geometry[[1]][[5]] = NULL
}
#Project coordinates of the events to work with UTM33:
latitude_ev = dataset$ev_latitude
longitude_ev = dataset$ev_longitude
long_lat_ev = cbind(longitude_ev, latitude_ev)
utm_ev = project(long_lat_ev, "+proj=utm +zone=33 ellps=WGS84")
utm_ev = as.data.frame(utm_ev)
long_lat_ev = as.data.frame(long_lat_ev)
#Project coordinates of the stations to work with UTM33:
latitude_st = dataset$st_latitude
longitude_st = dataset$st_longitude
long_lat_st = cbind(longitude_st, latitude_st)
utm_st = project(long_lat_st, "+proj=utm +zone=33 ellps=WGS84")
utm_st = as.data.frame(utm_st)
long_lat_st = as.data.frame(long_lat_st)
#Build spatial points data frame for UTM33 coordinates:
utm_ev_sp = SpatialPointsDataFrame(utm_ev, dataset[,1:6])
utm_st_sp = SpatialPointsDataFrame(utm_st, dataset[,1:6])
#Transform shapefile into spatial dataframe:
shape_utm_spatial = as_Spatial(shape_utm_no_sardinia)
grid_utm = makegrid(shape_utm_spatial, cellsize = 10000) # cellsize in map units!
grid_utm = SpatialPoints(grid_utm, proj4string = CRS(proj4string(shape_utm_spatial)))
grid_inside_utm = grid_utm[shape_utm_spatial,]
coords_utm = grid_inside_utm@coords
#Transform shapefile into spatial dataframe:
shape_utm_spatial = as_Spatial(shape_utm_no_sardinia)
grid_utm = makegrid(shape_utm_spatial, cellsize = 10000) # cellsize in map units!
grid_utm = SpatialPoints(grid_utm, proj4string = CRS(proj4string(shape_utm_spatial)))
Xc = cbind(b1,b2,f1,f2,c1)
Xe = cbind(c2,c3)
Xs = k
# best bandwidth is set
bwe = 25000
bws = 75000
coords_df_utm = as.data.frame(coords_utm)
dim(Xc)
dim(coordinates(utm_ev_sp))
head(dataset)
utm_ev_sp = SpatialPointsDataFrame(utm_ev, dataset[,1:6])
head(utm_ev_sp)
utm_ev_sp
head(data)
head(data)
# load required packages
library(lme4)
library(sf)
library(raster)
library(rgdal)
library(GWmodel)
library(ggplot2)
library(tictoc)
setwd('/Users/nico/GROUNDMOTION/PROJECTS/NONERGODIC/ITALY/Git/NonErgGMM_Italy')
source(file.path("R_Caramenti", "functions.R"))
source(file.path("R_Caramenti", "predict_new.R"))
# read in data file with event and station ids
# corrected for Vs30 differences between stations of same location
data <- read.csv(file.path('DATA', 'italian_data_pga_id_utm_stat.csv'))
print(dim(data))
data <- data[1:200,]
# Set linear predictors
mh = 5.5
mref = 5.324
h = 6.924
attach(data)
b1 = (mag-mh)*(mag<=mh)
b2 = (mag-mh)*(mag>mh)
c1 = (mag-mref)*log10(sqrt(JB_complete^2+h^2))
c2 = log10(sqrt(JB_complete^2+h^2))
c3 = sqrt(JB_complete^2+h^2)
f1 = as.numeric(fm_type_code == "SS")
f2 = as.numeric(fm_type_code == "TF")
k = log10(vs30/800)*(vs30<=1500)+log10(1500/800)*(vs30>1500)
y = log10(rotD50_pga)
detach(data)
eq <- data$EQID
stat <- data$STATID
n_rec <- length(b1)
n_eq <- max(eq)
n_stat <- max(stat)
# spatial coordinates
dataset = readRDS(file.path("DATA","italian_data_pga.RData"))
shape_utm = st_read(file.path("DATA",'confini_ut33.shp'))
shape_utm_no_lamp = shape_utm
shape_utm_no_lamp$geometry[[1]][[12]] = NULL
shape_utm_no_sardinia = shape_utm
shape_utm_no_sardinia$geometry[[1]][[3]] = NULL
for (i in 4:10){
shape_utm_no_sardinia$geometry[[1]][[4]] = NULL
}
for (i in 12:57){
shape_utm_no_sardinia$geometry[[1]][[5]] = NULL
}
#Project coordinates of the events to work with UTM33:
latitude_ev = data$ev_latitude
longitude_ev = data$ev_longitude
long_lat_ev = cbind(longitude_ev, latitude_ev)
utm_ev = project(long_lat_ev, "+proj=utm +zone=33 ellps=WGS84")
utm_ev = as.data.frame(utm_ev)
long_lat_ev = as.data.frame(long_lat_ev)
#Project coordinates of the stations to work with UTM33:
latitude_st = data$st_latitude
longitude_st = data$st_longitude
long_lat_st = cbind(longitude_st, latitude_st)
utm_st = project(long_lat_st, "+proj=utm +zone=33 ellps=WGS84")
utm_st = as.data.frame(utm_st)
long_lat_st = as.data.frame(long_lat_st)
#Build spatial points data frame for UTM33 coordinates:
utm_ev_sp = SpatialPointsDataFrame(utm_ev, data[,1:7])
utm_st_sp = SpatialPointsDataFrame(utm_st, data[,1:7])
#Transform shapefile into spatial dataframe:
shape_utm_spatial = as_Spatial(shape_utm_no_sardinia)
grid_utm = makegrid(shape_utm_spatial, cellsize = 10000) # cellsize in map units!
grid_utm = SpatialPoints(grid_utm, proj4string = CRS(proj4string(shape_utm_spatial)))
grid_inside_utm = grid_utm[shape_utm_spatial,]
coords_utm = grid_inside_utm@coords
#Transform shapefile into spatial dataframe:
shape_utm_spatial = as_Spatial(shape_utm_no_sardinia)
grid_utm = makegrid(shape_utm_spatial, cellsize = 10000) # cellsize in map units!
grid_utm = SpatialPoints(grid_utm, proj4string = CRS(proj4string(shape_utm_spatial)))
Xc = cbind(b1,b2,f1,f2,c1)
Xe = cbind(c2,c3)
Xs = k
# best bandwidth is set
bwe = 25000
bws = 75000
coords_df_utm = as.data.frame(coords_utm)
tic()
sec = SEC_only_calibration(Xc, Xe, Xs, y, "c", bwe, bws, coordinates(utm_ev_sp), coordinates(utm_st_sp))
toc()
#Now we can compute all the regression coefficients:
result = SEC_grid_creation(Xc, Xe, Xs, y,"c", bwe, bws, coordinates(utm_ev_sp),
coordinates(utm_st_sp), coords_utm, sec)
coords_utm
dim(coords_utm)
# load required packages
library(lme4)
library(sf)
library(raster)
library(rgdal)
library(GWmodel)
library(ggplot2)
library(tictoc)
setwd('/Users/nico/GROUNDMOTION/PROJECTS/NONERGODIC/ITALY/Git/NonErgGMM_Italy')
source(file.path("R_Caramenti", "functions.R"))
source(file.path("R_Caramenti", "predict_new.R"))
# read in data file with event and station ids
# corrected for Vs30 differences between stations of same location
data <- read.csv(file.path('DATA', 'italian_data_pga_id_utm_stat.csv'))
print(dim(data))
data <- data[1:1000,]
# Set linear predictors
mh = 5.5
mref = 5.324
h = 6.924
attach(data)
b1 = (mag-mh)*(mag<=mh)
b2 = (mag-mh)*(mag>mh)
c1 = (mag-mref)*log10(sqrt(JB_complete^2+h^2))
c2 = log10(sqrt(JB_complete^2+h^2))
c3 = sqrt(JB_complete^2+h^2)
f1 = as.numeric(fm_type_code == "SS")
f2 = as.numeric(fm_type_code == "TF")
k = log10(vs30/800)*(vs30<=1500)+log10(1500/800)*(vs30>1500)
y = log10(rotD50_pga)
detach(data)
eq <- data$EQID
stat <- data$STATID
n_rec <- length(b1)
n_eq <- max(eq)
n_stat <- max(stat)
# spatial coordinates
dataset = readRDS(file.path("DATA","italian_data_pga.RData"))
shape_utm = st_read(file.path("DATA",'confini_ut33.shp'))
shape_utm_no_lamp = shape_utm
shape_utm_no_lamp$geometry[[1]][[12]] = NULL
shape_utm_no_sardinia = shape_utm
shape_utm_no_sardinia$geometry[[1]][[3]] = NULL
for (i in 4:10){
shape_utm_no_sardinia$geometry[[1]][[4]] = NULL
}
for (i in 12:57){
shape_utm_no_sardinia$geometry[[1]][[5]] = NULL
}
#Project coordinates of the events to work with UTM33:
latitude_ev = data$ev_latitude
longitude_ev = data$ev_longitude
long_lat_ev = cbind(longitude_ev, latitude_ev)
utm_ev = project(long_lat_ev, "+proj=utm +zone=33 ellps=WGS84")
utm_ev = as.data.frame(utm_ev)
long_lat_ev = as.data.frame(long_lat_ev)
#Project coordinates of the stations to work with UTM33:
latitude_st = data$st_latitude
longitude_st = data$st_longitude
long_lat_st = cbind(longitude_st, latitude_st)
utm_st = project(long_lat_st, "+proj=utm +zone=33 ellps=WGS84")
utm_st = as.data.frame(utm_st)
long_lat_st = as.data.frame(long_lat_st)
#Build spatial points data frame for UTM33 coordinates:
utm_ev_sp = SpatialPointsDataFrame(utm_ev, data[,1:7])
utm_st_sp = SpatialPointsDataFrame(utm_st, data[,1:7])
#Transform shapefile into spatial dataframe:
shape_utm_spatial = as_Spatial(shape_utm_no_sardinia)
grid_utm = makegrid(shape_utm_spatial, cellsize = 10000) # cellsize in map units!
grid_utm = SpatialPoints(grid_utm, proj4string = CRS(proj4string(shape_utm_spatial)))
grid_inside_utm = grid_utm[shape_utm_spatial,]
coords_utm = grid_inside_utm@coords
#Transform shapefile into spatial dataframe:
shape_utm_spatial = as_Spatial(shape_utm_no_sardinia)
grid_utm = makegrid(shape_utm_spatial, cellsize = 10000) # cellsize in map units!
grid_utm = SpatialPoints(grid_utm, proj4string = CRS(proj4string(shape_utm_spatial)))
Xc = cbind(b1,b2,f1,f2,c1)
Xe = cbind(c2,c3)
Xs = k
# best bandwidth is set
bwe = 25000
bws = 75000
coords_df_utm = as.data.frame(coords_utm)
tic()
sec = SEC_only_calibration(Xc, Xe, Xs, y, "c", bwe, bws, coordinates(utm_ev_sp), coordinates(utm_st_sp))
toc()
#Now we can compute all the regression coefficients:
result = SEC_grid_creation(Xc, Xe, Xs, y,"c", bwe, bws, coordinates(utm_ev_sp),
coordinates(utm_st_sp), coords_utm, sec)
help(tr)
11434.796/3600
